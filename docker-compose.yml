version: '3.9'
services:

  extract:
    build:
      context: .
      dockerfile: ./ext/Dockerfile
    user: user
    ports:
      - '6080:6080'
    cap_drop:
      - ALL
      - SETUID
      - SETGID
    deploy:
      restart_policy:
        condition: unless-stopped
        delay: 1s
        window: 60s
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 64M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6080/"]
      interval: 1s
      timeout: 10s
      retries: 3
      start_period: 10s

  subset:
    build:
      context: .
      dockerfile: ./sub/Dockerfile
    user: user
    ports:
      - '4080:4080'
    cap_drop:
      - ALL
      - SETUID
      - SETGID
    deploy:
      restart_policy:
        condition: unless-stopped
        delay: 1s
        window: 30s
      resources:
        limits:
          memory: 2048M
        reservations:
          memory: 512M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4080/"]
      interval: 1s
      timeout: 10s
      retries: 3
      start_period: 10s
    depends_on:
      extract:
        condition: service_healthy

  database:
    image: postgres:15.2
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - '5432:5432'
    deploy:
      restart_policy:
        condition: unless-stopped
        delay: 1s
        window: 60s
    volumes:
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${DB_USER}", "-d", "${DB_NAME}"]
      interval: 1s
      timeout: 10s
      retries: 3
      start_period: 10s
    depends_on:
      extract:
        condition: service_healthy
      subset:
        condition: service_healthy

  write:
    build:
      context: .
      dockerfile: ./wrt/Dockerfile
    user: user
    cap_drop:
      - ALL
      - SETUID
      - SETGID
    deploy:
      restart_policy:
        condition: unless-stopped
        delay: 1s
        window: 30s
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 128M
    network_mode: host
    depends_on:
      extract:
        condition: service_healthy
      subset:
        condition: service_healthy
      database:
        condition: service_healthy
